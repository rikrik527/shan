$(function(){"use strict";QUnit.module("collapse plugin"),QUnit.test("should be defined on jquery object",function(e){e.expect(1),e.ok($(document.body).collapse,"collapse method is defined")}),QUnit.module("collapse",{beforeEach:function(){$.fn.bootstrapCollapse=$.fn.collapse.noConflict()},afterEach:function(){$.fn.collapse=$.fn.bootstrapCollapse,delete $.fn.bootstrapCollapse}}),QUnit.test("should provide no conflict",function(e){e.expect(1),e.strictEqual($.fn.collapse,void 0,"collapse was set back to undefined (org value)")}),QUnit.test("should throw explicit error on undefined method",function(e){e.expect(1);var n=$("<div/>");n.bootstrapCollapse();try{n.bootstrapCollapse("noMethod")}catch(t){e.strictEqual(t.message,'No method named "noMethod"')}}),QUnit.test("should return jquery collection containing the element",function(e){e.expect(2);var n=$("<div/>"),t=n.bootstrapCollapse();e.ok(t instanceof $,"returns jquery collection"),e.strictEqual(t[0],n[0],"collection contains element")}),QUnit.test("should show a collapsed element",function(e){e.expect(2);var n=$('<div class="collapse"/>').bootstrapCollapse("show");e.ok(n.hasClass("in"),'has class "in"'),e.ok(!/height/i.test(n.attr("style")),"has height reset")}),QUnit.test("should hide a collapsed element",function(e){e.expect(1);var n=$('<div class="collapse"/>').bootstrapCollapse("hide");e.ok(!n.hasClass("in"),'does not have class "in"')}),QUnit.test("should not fire shown when show is prevented",function(e){e.expect(1);var n=e.async();$('<div class="collapse"/>').on("show.bs.collapse",function(t){t.preventDefault(),e.ok(!0,"show event fired"),n()}).on("shown.bs.collapse",function(){e.ok(!1,"shown event fired")}).bootstrapCollapse("show")}),QUnit.test("should reset style to auto after finishing opening collapse",function(e){e.expect(2);var n=e.async();$('<div class="collapse" style="height: 0px"/>').on("show.bs.collapse",function(){e.strictEqual(this.style.height,"0px","height is 0px")}).on("shown.bs.collapse",function(){e.strictEqual(this.style.height,"","height is auto"),n()}).bootstrapCollapse("show")}),QUnit.test("should reset style to auto after finishing closing collapse",function(e){e.expect(1);var n=e.async();$('<div class="collapse"/>').on("shown.bs.collapse",function(){$(this).bootstrapCollapse("hide")}).on("hidden.bs.collapse",function(){e.strictEqual(this.style.height,"","height is auto"),n()}).bootstrapCollapse("show")}),QUnit.test('should remove "collapsed" class from target when collapse is shown',function(e){e.expect(1);var n=e.async(),t=$('<a role="button" data-toggle="collapse" class="collapsed" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1"/>').appendTo("#qunit-fixture").on("shown.bs.collapse",function(){e.ok(!t.hasClass("collapsed"),"target does not have collapsed class"),n()}),t.trigger("click")}),QUnit.test('should add "collapsed" class to target when collapse is hidden',function(e){e.expect(1);var n=e.async(),t=$('<a role="button" data-toggle="collapse" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hidden.bs.collapse",function(){e.ok(t.hasClass("collapsed"),"target has collapsed class"),n()}),t.trigger("click")}),QUnit.test('should remove "collapsed" class from all triggers targeting the collapse when the collapse is shown',function(e){e.expect(2);var n=e.async(),t=$('<a role="button" data-toggle="collapse" class="collapsed" href="#test1"/>').appendTo("#qunit-fixture"),r=$('<a role="button" data-toggle="collapse" class="collapsed" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1"/>').appendTo("#qunit-fixture").on("shown.bs.collapse",function(){e.ok(!t.hasClass("collapsed"),"target trigger does not have collapsed class"),e.ok(!r.hasClass("collapsed"),"alt trigger does not have collapsed class"),n()}),t.trigger("click")}),QUnit.test('should add "collapsed" class to all triggers targeting the collapse when the collapse is hidden',function(e){e.expect(2);var n=e.async(),t=$('<a role="button" data-toggle="collapse" href="#test1"/>').appendTo("#qunit-fixture"),r=$('<a role="button" data-toggle="collapse" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hidden.bs.collapse",function(){e.ok(t.hasClass("collapsed"),"target has collapsed class"),e.ok(r.hasClass("collapsed"),"alt trigger has collapsed class"),n()}),t.trigger("click")}),QUnit.test('should not close a collapse when initialized with "show" option if already shown',function(e){e.expect(0);var n=e.async(),t=$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hide.bs.collapse",function(){e.ok(!1)});t.bootstrapCollapse("show"),setTimeout(n,0)}),QUnit.test('should open a collapse when initialized with "show" option if not already shown',function(e){e.expect(1);var n=e.async(),t=$('<div id="test1" />').appendTo("#qunit-fixture").on("show.bs.collapse",function(){e.ok(!0)});t.bootstrapCollapse("show"),setTimeout(n,0)}),QUnit.test('should not show a collapse when initialized with "hide" option if already hidden',function(e){e.expect(0);var n=e.async();$('<div class="collapse"></div>').appendTo("#qunit-fixture").on("show.bs.collapse",function(){e.ok(!1,'showing a previously-uninitialized hidden collapse when the "hide" method is called')}).bootstrapCollapse("hide"),setTimeout(n,0)}),QUnit.test('should hide a collapse when initialized with "hide" option if not already hidden',function(e){e.expect(1);var n=e.async();$('<div class="collapse in"></div>').appendTo("#qunit-fixture").on("hide.bs.collapse",function(){e.ok(!0,'hiding a previously-uninitialized shown collapse when the "hide" method is called')}).bootstrapCollapse("hide"),setTimeout(n,0)}),QUnit.test('should remove "collapsed" class from active accordion target',function(e){e.expect(3);var n=e.async(),t='<div id="accordion"><div class="card"/><div class="card"/><div class="card"/></div>',r=$(t).appendTo("#qunit-fixture").find(".card"),a=$('<a role="button" data-toggle="collapse" href="#body1" data-parent="#accordion"/>').appendTo(r.eq(0));$('<div id="body1" class="in"/>').appendTo(r.eq(0));var i=$('<a class="collapsed" data-toggle="collapse" role="button" href="#body2" data-parent="#accordion"/>').appendTo(r.eq(1));$('<div id="body2"/>').appendTo(r.eq(1));var s=$('<a class="collapsed" data-toggle="collapse" role="button" href="#body3" data-parent="#accordion"/>').appendTo(r.eq(2));$('<div id="body3"/>').appendTo(r.eq(2)).on("shown.bs.collapse",function(){e.ok(a.hasClass("collapsed"),'inactive target 1 does have class "collapsed"'),e.ok(i.hasClass("collapsed"),'inactive target 2 does have class "collapsed"'),e.ok(!s.hasClass("collapsed"),'active target 3 does not have class "collapsed"'),n()}),s.trigger("click")}),QUnit.test("should allow dots in data-parent",function(e){e.expect(3);var n=e.async(),t='<div class="accordion"><div class="card"/><div class="card"/><div class="card"/></div>',r=$(t).appendTo("#qunit-fixture").find(".card"),a=$('<a role="button" data-toggle="collapse" href="#body1" data-parent=".accordion"/>').appendTo(r.eq(0));$('<div id="body1" class="in"/>').appendTo(r.eq(0));var i=$('<a class="collapsed" data-toggle="collapse" role="button" href="#body2" data-parent=".accordion"/>').appendTo(r.eq(1));$('<div id="body2"/>').appendTo(r.eq(1));var s=$('<a class="collapsed" data-toggle="collapse" role="button" href="#body3" data-parent=".accordion"/>').appendTo(r.eq(2));$('<div id="body3"/>').appendTo(r.eq(2)).on("shown.bs.collapse",function(){e.ok(a.hasClass("collapsed"),'inactive target 1 does have class "collapsed"'),e.ok(i.hasClass("collapsed"),'inactive target 2 does have class "collapsed"'),e.ok(!s.hasClass("collapsed"),'active target 3 does not have class "collapsed"'),n()}),s.trigger("click")}),QUnit.test('should set aria-expanded="true" on target when collapse is shown',function(e){e.expect(1);var n=e.async(),t=$('<a role="button" data-toggle="collapse" class="collapsed" href="#test1" aria-expanded="false"/>').appendTo("#qunit-fixture");$('<div id="test1"/>').appendTo("#qunit-fixture").on("shown.bs.collapse",function(){e.strictEqual(t.attr("aria-expanded"),"true",'aria-expanded on target is "true"'),n()}),t.trigger("click")}),QUnit.test('should set aria-expanded="false" on target when collapse is hidden',function(e){e.expect(1);var n=e.async(),t=$('<a role="button" data-toggle="collapse" href="#test1" aria-expanded="true"/>').appendTo("#qunit-fixture");$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hidden.bs.collapse",function(){e.strictEqual(t.attr("aria-expanded"),"false",'aria-expanded on target is "false"'),n()}),t.trigger("click")}),QUnit.test('should set aria-expanded="true" on all triggers targeting the collapse when the collapse is shown',function(e){e.expect(2);var n=e.async(),t=$('<a role="button" data-toggle="collapse" class="collapsed" href="#test1" aria-expanded="false"/>').appendTo("#qunit-fixture"),r=$('<a role="button" data-toggle="collapse" class="collapsed" href="#test1" aria-expanded="false"/>').appendTo("#qunit-fixture");$('<div id="test1"/>').appendTo("#qunit-fixture").on("shown.bs.collapse",function(){e.strictEqual(t.attr("aria-expanded"),"true",'aria-expanded on target is "true"'),e.strictEqual(r.attr("aria-expanded"),"true",'aria-expanded on alt is "true"'),n()}),t.trigger("click")}),QUnit.test('should set aria-expanded="false" on all triggers targeting the collapse when the collapse is hidden',function(e){e.expect(2);var n=e.async(),t=$('<a role="button" data-toggle="collapse" href="#test1" aria-expanded="true"/>').appendTo("#qunit-fixture"),r=$('<a role="button" data-toggle="collapse" href="#test1" aria-expanded="true"/>').appendTo("#qunit-fixture");$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hidden.bs.collapse",function(){e.strictEqual(t.attr("aria-expanded"),"false",'aria-expanded on target is "false"'),e.strictEqual(r.attr("aria-expanded"),"false",'aria-expanded on alt is "false"'),n()}),t.trigger("click")}),QUnit.test('should change aria-expanded from active accordion target to "false" and set the newly active one to "true"',function(e){e.expect(3);var n=e.async(),t='<div id="accordion"><div class="card"/><div class="card"/><div class="card"/></div>',r=$(t).appendTo("#qunit-fixture").find(".card"),a=$('<a role="button" data-toggle="collapse" href="#body1" data-parent="#accordion"/>').appendTo(r.eq(0));$('<div id="body1" aria-expanded="true" class="in"/>').appendTo(r.eq(0));var i=$('<a role="button" data-toggle="collapse" href="#body2" data-parent="#accordion" class="collapsed" />').appendTo(r.eq(1));$('<div id="body2" aria-expanded="false"/>').appendTo(r.eq(1));var s=$('<a class="collapsed" data-toggle="collapse" role="button" href="#body3" data-parent="#accordion"/>').appendTo(r.eq(2));$('<div id="body3" aria-expanded="false"/>').appendTo(r.eq(2)).on("shown.bs.collapse",function(){e.strictEqual(a.attr("aria-expanded"),"false",'inactive target 1 has aria-expanded="false"'),e.strictEqual(i.attr("aria-expanded"),"false",'inactive target 2 has aria-expanded="false"'),e.strictEqual(s.attr("aria-expanded"),"true",'active target 3 has aria-expanded="false"'),n()}),s.trigger("click")}),QUnit.test("should not fire show event if show is prevented because other element is still transitioning",function(e){e.expect(1);var n=e.async(),t='<div id="accordion"><div class="card"/><div class="card"/></div>',r=!1,a=$(t).appendTo("#qunit-fixture").find(".card"),i=$('<a role="button" data-toggle="collapse" href="#body1" data-parent="#accordion"/>').appendTo(a.eq(0));$('<div id="body1" class="collapse"/>').appendTo(a.eq(0)).on("show.bs.collapse",function(){r=!0});var s=$('<a role="button" data-toggle="collapse" href="#body2" data-parent="#accordion"/>').appendTo(a.eq(1)),o=$('<div id="body2" class="collapse"/>').appendTo(a.eq(1));s.trigger("click"),o.toggleClass("in collapsing").data("bs.collapse")._isTransitioning=1,i.trigger("click"),setTimeout(function(){e.ok(!r,"show event did not fire"),n()},1)}),QUnit.test('should add "collapsed" class to target when collapse is hidden via manual invocation',function(e){e.expect(1);var n=e.async(),t=$('<a role="button" data-toggle="collapse" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hidden.bs.collapse",function(){e.ok(t.hasClass("collapsed")),n()}).bootstrapCollapse("hide")}),QUnit.test('should remove "collapsed" class from target when collapse is shown via manual invocation',function(e){e.expect(1);var n=e.async(),t=$('<a role="button" data-toggle="collapse" class="collapsed" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1"/>').appendTo("#qunit-fixture").on("shown.bs.collapse",function(){e.ok(!t.hasClass("collapsed")),n()}).bootstrapCollapse("show")})});